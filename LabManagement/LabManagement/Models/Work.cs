//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LabManagement.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public partial class Work
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Work()
        {
            this.Members = new HashSet<Member>();
            this.Projects = new HashSet<Project>();
        }
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        public int ID { get; set; }
        public string workingtime { get; set; }
        public string salary { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Member> Members { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Project> Projects { get; set; }
        public ICollection<Member> listMems { set; get; }
        public string ListMemToString()
        {
            string str = "";

            for (int i = 0; i < this.listMems.Count; i++)
            {
                str += listMems.ToList()[i].memcode + " ";
            }
            return str;
        }
        public ICollection<Project> listPros { set; get; }
        public string ListProToString()
        {
            string str = "";

            for (int i = 0; i < this.listPros.Count; i++)
            {
                str += listPros.ToList()[i].procode + " ";
            }
            return str;
        }
    }
}
